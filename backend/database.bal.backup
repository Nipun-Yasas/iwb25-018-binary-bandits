// =============================================================================
// DATABASE CONFIGURATION MODULE
// =============================================================================
// This module handles all database connections and configuration
// It provides a centralized way to manage MySQL connectivity

import ballerinax/mysql;
import ballerina/sql;
import ballerina/log;

// =============================================================================
// DATABASE CONNECTION CONFIGURATION
// =============================================================================
// Configuration for connecting to our MySQL database
// These values match the Docker Compose setup from our docker-compose.yml

// Database connection parameters - these match our Docker setup
const string DB_HOST = "localhost";
const int DB_PORT = 3307;              // Custom port to avoid conflicts
const string DB_NAME = "insurance_audit";
const string DB_USER = "root";
const string DB_PASSWORD = "password123";

// Connection pool settings for optimal performance
const int MAX_POOL_SIZE = 10;          // Maximum connections in pool
const int MIN_POOL_SIZE = 2;           // Minimum connections to maintain
const int CONNECTION_TIMEOUT = 30;     // Timeout in seconds

// =============================================================================
// DATABASE CLIENT INSTANCE
// =============================================================================
// Global database client instance that will be used throughout the application
// This uses connection pooling for better performance

// Database client configuration with connection pooling
mysql:Options dbOptions = {
    connectTimeout: CONNECTION_TIMEOUT,
    socketTimeout: 30
};

// Create the database client with proper error handling
mysql:Client|sql:Error dbClient = new(
    host = DB_HOST,
    port = DB_PORT,
    user = DB_USER,
    password = DB_PASSWORD,
    database = DB_NAME,
    options = dbOptions
);

// =============================================================================
// DATABASE CLIENT GETTER FUNCTION
// =============================================================================
// Function to get the database client with proper error handling
// This ensures we always have a valid connection or proper error reporting

public function getDBClient() returns mysql:Client|error {
    // Check if the global client was initialized successfully
    if dbClient is mysql:Client {
        log:printInfo("Database client retrieved successfully");
        return dbClient;
    } else {
        // Log the error for debugging
        log:printError("Failed to initialize database client", 'error = dbClient);
        return dbClient;
    }
}

// =============================================================================
// DATABASE CONNECTION TEST FUNCTION
// =============================================================================
// Function to test database connectivity
// This is useful for health checks and startup validation

public function testDatabaseConnection() returns boolean {
    log:printInfo("Testing database connection...");
    
    // Get the database client
    mysql:Client|error client = getDBClient();
    
    if client is mysql:Client {
        // Try to execute a simple query to test the connection
        sql:ExecutionResult|sql:Error result = client->execute(`SELECT 1 as test`);
        
        if result is sql:ExecutionResult {
            log:printInfo("Database connection test successful");
            return true;
        } else {
            log:printError("Database connection test failed - query execution error", 'error = result);
            return false;
        }
    } else {
        log:printError("Database connection test failed - client initialization error", 'error = client);
        return false;
    }
}

// =============================================================================
// DATABASE INITIALIZATION FUNCTION
// =============================================================================
// Function to initialize database connection on application startup
// This should be called when the service starts

public function initializeDatabase() returns error? {
    log:printInfo("Initializing database connection...");
    
    // Test the connection
    boolean isConnected = testDatabaseConnection();
    
    if !isConnected {
        return error("Failed to establish database connection");
    }
    
    log:printInfo("Database initialization completed successfully");
    return ();
}

// =============================================================================
// DATABASE CLEANUP FUNCTION
// =============================================================================
// Function to properly close database connections
// This should be called when the service is shutting down

public function closeDatabaseConnection() returns error? {
    log:printInfo("Closing database connection...");
    
    if dbClient is mysql:Client {
        // Close the database client
        error? closeResult = dbClient.close();
        
        if closeResult is error {
            log:printError("Error closing database connection", 'error = closeResult);
            return closeResult;
        } else {
            log:printInfo("Database connection closed successfully");
        }
    }
    
    return ();
}

// =============================================================================
// QUERY EXECUTION HELPER FUNCTIONS
// =============================================================================
// Helper functions for common database operations with proper error handling

// Execute a query that returns data (SELECT statements)
public function executeQuery(sql:ParameterizedQuery query) returns stream<record {}, sql:Error?>|sql:Error {
    mysql:Client|error client = getDBClient();
    
    if client is mysql:Client {
        log:printDebug("Executing query: " + query.toString());
        return client->query(query);
    } else {
        log:printError("Cannot execute query - database client not available", 'error = client);
        return client;
    }
}

// Execute a statement that doesn't return data (INSERT, UPDATE, DELETE)
public function executeStatement(sql:ParameterizedQuery statement) returns sql:ExecutionResult|sql:Error {
    mysql:Client|error client = getDBClient();
    
    if client is mysql:Client {
        log:printDebug("Executing statement: " + statement.toString());
        return client->execute(statement);
    } else {
        log:printError("Cannot execute statement - database client not available", 'error = client);
        return client;
    }
}

// =============================================================================
// CONNECTION HEALTH CHECK
// =============================================================================
// Function to check if the database connection is still healthy
// This can be used for monitoring and health endpoints

public function isDatabaseHealthy() returns boolean {
    mysql:Client|error client = getDBClient();
    
    if client is mysql:Client {
        // Try a lightweight query to check connectivity
        sql:ExecutionResult|sql:Error result = client->execute(`SELECT 1`);
        return result is sql:ExecutionResult;
    }
    
    return false;
}

// =============================================================================
// DATABASE STATISTICS
// =============================================================================
// Function to get basic database statistics for monitoring

public type DatabaseStats record {
    boolean is_connected;
    string database_name;
    string host;
    int port;
    string status_message;
};

public function getDatabaseStats() returns DatabaseStats {
    boolean isHealthy = isDatabaseHealthy();
    
    return {
        is_connected: isHealthy,
        database_name: DB_NAME,
        host: DB_HOST,
        port: DB_PORT,
        status_message: isHealthy ? "Connected and healthy" : "Connection issues detected"
    };
}
